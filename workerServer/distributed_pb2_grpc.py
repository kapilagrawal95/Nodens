# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import distributed_pb2 as distributed__pb2


class GrpcServiceStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_traffic = channel.unary_unary(
                '/GrpcService/get_traffic',
                request_serializer=distributed__pb2.TrafficRequest.SerializeToString,
                response_deserializer=distributed__pb2.TrafficResponse.FromString,
                )
        self.adjustRes = channel.unary_unary(
                '/GrpcService/adjustRes',
                request_serializer=distributed__pb2.ResRequest.SerializeToString,
                response_deserializer=distributed__pb2.ResResponse.FromString,
                )
        self.get_profile = channel.unary_unary(
                '/GrpcService/get_profile',
                request_serializer=distributed__pb2.ProfileRequest.SerializeToString,
                response_deserializer=distributed__pb2.ProfileResponse.FromString,
                )
        self.get_net_proc = channel.unary_unary(
                '/GrpcService/get_net_proc',
                request_serializer=distributed__pb2.NetProcRequest.SerializeToString,
                response_deserializer=distributed__pb2.NetProcResponse.FromString,
                )


class GrpcServiceServicer(object):
    """
    """

    def get_traffic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def adjustRes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_profile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_net_proc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_traffic': grpc.unary_unary_rpc_method_handler(
                    servicer.get_traffic,
                    request_deserializer=distributed__pb2.TrafficRequest.FromString,
                    response_serializer=distributed__pb2.TrafficResponse.SerializeToString,
            ),
            'adjustRes': grpc.unary_unary_rpc_method_handler(
                    servicer.adjustRes,
                    request_deserializer=distributed__pb2.ResRequest.FromString,
                    response_serializer=distributed__pb2.ResResponse.SerializeToString,
            ),
            'get_profile': grpc.unary_unary_rpc_method_handler(
                    servicer.get_profile,
                    request_deserializer=distributed__pb2.ProfileRequest.FromString,
                    response_serializer=distributed__pb2.ProfileResponse.SerializeToString,
            ),
            'get_net_proc': grpc.unary_unary_rpc_method_handler(
                    servicer.get_net_proc,
                    request_deserializer=distributed__pb2.NetProcRequest.FromString,
                    response_serializer=distributed__pb2.NetProcResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrpcService(object):
    """
    """

    @staticmethod
    def get_traffic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrpcService/get_traffic',
            distributed__pb2.TrafficRequest.SerializeToString,
            distributed__pb2.TrafficResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def adjustRes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrpcService/adjustRes',
            distributed__pb2.ResRequest.SerializeToString,
            distributed__pb2.ResResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_profile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrpcService/get_profile',
            distributed__pb2.ProfileRequest.SerializeToString,
            distributed__pb2.ProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_net_proc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrpcService/get_net_proc',
            distributed__pb2.NetProcRequest.SerializeToString,
            distributed__pb2.NetProcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
